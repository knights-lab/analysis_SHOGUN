import os
# The configuration file
REF_BASENAMES = expand("{basename}", basename = ["miniGWG.100"])
REFS = [utree_ref_path]

def get_fasta_path(wildcards):
    basename = wildcards.basename

    if basename.startswith("miniGWG.100"):
        path = config["indexes"]["miniGWG.100"] + "/miniGWG.100.fna"
    else:
        assert False

    return path

########################################################################
# INDICES
########################################################################
rule utree_specific_build:
    input:
        # fasta = lambda wildcards: os.path.join(config["indexes"][wildcards.basename], "{basename}.fna".format(basename=wildcards.basename)),
        # tax = lambda wildcards: os.path.join(config["indexes"][wildcards.basename], "{basename}.tax".format(basename=wildcards.basename))
        get_fasta_path,
        lambda wildcards: get_fasta_path(wildcards)[:-4] + '.tax'
    # params:
    #     taxa_path =
    output:
        ctr = "{output_path}/{basename}.ctr",
        utree_log = "{output_path}/{basename}.log",
        time_memory_log = "{output_path}/{basename}.time_mem.log"
#    benchmark:
#        "{output_path}/{sample}.txt"
#    threads: 120
    shell:
        """
        /usr/bin/time -v sh -c 'utree-build {input[0]} {input[1]} {wildcards.output_path}/{wildcards.basename}.ubt {threads};
        utree-compress {wildcards.output_path}/{wildcards.basename}.ubt {output.ctr}' >> {output.time_memory_log} 2>&1
        mv {wildcards.output_path}/{wildcards.basename}.ubt.log {output.utree_log}
        rm {wildcards.output_path}/{wildcards.basename}.ubt
        """

########################################################################
# TIME MEMORY LOG
########################################################################
rule generate_indices_time_and_memory_table:
  input:
    # UTREE
    expand("{ref}/{basename}.{k}.time_mem.log", ref = REFS, basename = REF_BASENAMES, k = range(3))
  output:
    expand("{output_path}/{name}_table.txt", output_path = result_path, name = "indices_time_and_memory")
  shell:
    "{script_path}/generate_indices_time_and_memory_table.py {input}.time_mem.log >> {output}"

rule clean:
    shell:
        "rm -rf {OUTPUT_PATH}"
